#summary This page explains how to import/export emotions

= Introduction =

The EmotionML proposed recommendation is a W3C ongoing standard about representing emotions with a markup language. The main advantage of the standard is that it acknowledges for the lack of consensus on how to represent an emotion and thus proposes to standardize the most general aspects of an emotion. An emotion is described in terms of *descriptors* : category, dimension, appraisal and action-tendency. These descriptors are defined with a name and an optional intensity value.  

For instance, the following example shows a mixture of sadness, anger and fear:
{{{
<emotion category-set="http://www.w3.org/TR/emotion-voc/xml#big6">
    <category name="sadness" value="0.3"/>
    <category name="anger" value="0.8"/>
    <category name="fear" value="0.3"/>
</emotion>
}}}

When using a descriptor, it is required to define a *vocabulary* that lists all allowed names for the "name" attribute. In the example, the emotion defines a *category-set* URI that refers to a category vocabulary. If this category-set is not defined, the emotion is not valid with respect to the standard. EmotionML has a number of constraints on how to build a valid emotion. See [http://www.w3.org/TR/emotionml/ EmotionML Proposed Recommendation] for a full description of the standard.

This page explains how to use this implementation of EmotionML, how to build emotions, how to export them, and how to import them.


= Overview =

== General approach ==

The general approach of the library is to be rather liberal on how to build and modify emotions with respect to the EmotionML constraints, and only check those constraints when importing and exporting. For instance all descriptors can be described with a value or with a trace (a dynamic representation of value), but not both at the same time. Because it would be too cumbersome to verify the validity of emotions with regards to all constraints, the library allows for the construction of invalid emotions, for instance a category with both a trace and a value. When trying to export an invalid emotion or to import an invalid emotion, an EmotionMLValidationException is thrown.

== Vocabularies handling ==

An important feature of EmotionML is how it handles vocabulary references using URIs. When representing an emotion with descriptors, the emotion must refer to a valid vocabulary listing all possible names for a descriptor. It means that when representing a descriptor with a custom name, the user has to also provide an accessible vocabulary defining that name. While the library allows for that, the library proposes to alleviate the vocabulary management by reusing the vocabularies defined on [http://www.w3.org/TR/emotion-voc/ Vocabularies for EmotionML] and its [http://www.w3.org/TR/emotion-voc/ EmotionML equivalent]. The package fr.loria.synalp.emotionml.vocabularies.predefined defines some existing vocabularies that ease the construction of valid emotions.


= Exporting emotions =

We show here some basic examples on how to build and export emotions. These examples can be found in the fr.loria.synalp.emotionml.examples package.

== Example 1 - Basic emotion ==

This example shows how to build an emotion using a predefined vocabulary of categories called Big6. When adding such predefined category, the advantage is that the category-set of the emotion is automatically setup. It would not be the case when building an emotion with a custom name.
{{{
Emotion emotion = new Emotion(Big6.FEAR);
new EmotionMLExporter().export(emotion, System.out);
}}}


== Example 2 - Compound emotion ==

This example shows that it is possible to combine a category like Big6.FEAR and a dimension like FsreDimensions.AROUSAL.
{{{
Emotion emotion = new Emotion(Big6.FEAR, FsreDimensions.AROUSAL);
new EmotionMLExporter().export(emotion, System.out);
}}}


== Example 3 - We cannot have two categories from two vocabularies ==

However it is not possible to mix two categories from two different vocabularies. For instance, when trying to export an emotion with Big6.FEAR and EverydayCategories.AFRAID, the exporter throws an exception.
{{{
Emotion emotion = new Emotion(Big6.FEAR, EverydayCategories.AFRAID);
new EmotionMLExporter().export(emotion, System.out); // exception thrown because Big6.FEAR has no category-set
}}}
Note that what really happens is that first Big6.FEAR is added to the emotion and the category-set URI of the emotion is setup to refer to the Big6 vocabulary, then EveryDayCategories.AFRAID is added, and the category-set URI is replaced such that it refers now to the EveryDayCategories vocabulary. But when exporting, the Big6.FEAR category has no more category-set URI and the exception is thrown.
  

== Example 4 - A custom category needs a category-set ==

So now if we want to create a custom category, for instance "love", we have to take care of the category-set URI, otherwise an exception is thrown as in the following example:
{{{
Emotion emotion = new Emotion(new Category("love"));
new EmotionMLExporter().export(emotion, System.out); // exception thrown, category "love" has no category-set
}}}


== Example 5 - A category-set needs to refer to a vocabulary ==

We can set the category-set manually by calling the setCategorySetURI method, however this URI needs to refer to a valid vocabulary as defined EmotionML (see [http://www.w3.org/TR/emotionml/#s3 Defining vocabularies for representing emotions]). The vocabulary needs to meet some additional constraints, it needs to be accessible online, needs to be a vocabulary of type "category" and needs to contain our category name, namely "love". Providing a fake URI such as http://myvocabularies#mycategories" will thus fail and throw an exception when exporting as in the following example:

{{{
Emotion emotion = new Emotion(new Category("love"));
emotion.setCategorySetURI("http://myvocabularies#mycategories");
new EmotionMLExporter().export(emotion, System.out); // exception thrown because the URI cannot be resolved
}}}


== Example 6 - We can bypass the vocabulary resolution ==

Well, this mechanism for category-set URIs (and others such as dimension-set, appraisal-set and action-tendency-set) can be a blocking factor when developing offline. It is thus possible to deactivate the vocabulary resolution when exporting an emotion. When doing the export of an emotion, the exporter performs a validation step using an instance of class EmotionMLValidator. By default this class always tries to resolve vocabularies. To deactivate vocabulary resolution we then need to pass an EmotionMLValidator to the EmotionMLExporter constructor that does not care about the vocabulary resolution, like in the following example. Note that when doing so, the exporter produces then *invalid* emotions with regards to EmotionML.

{{{
Emotion emotion = new Emotion(new Category("love"));
emotion.setCategorySetURI("http://myvocabularies#mycategories");

EmotionMLExporter exporter = new EmotionMLExporter(new EmotionMLValidator().setResolveVocabularies(false));
exporter.export(emotion, System.out); // no more exception
}}}


== Example 7 - Or we can create a vocabulary document ==

What if we really want to build a "love" category and produce valid emotions ? We have to also provide a vocabulary that describes the "love" category. In order to do so we can create the vocabulary document manually (see for example [http://www.w3.org/TR/emotion-voc/ EmotionML vocabularies]), or we can create it by code. The following examples first creates a vocabulary with id "mycategories" of type CATEGORY, and adds two items to it "love" and "hate. The vocabulary is then added to an EmotionMLDocument which is exported to a temporary file. When creating a "love" category, the category-set URI is defined to refer to that file, and to the "mycategories" vocabulary inside it. To refer to a particular vocabulary, EmotionML standard uses the fragment of the URI as the id of the vocabulary (`base`#`fragment`). Since the exporter can now find a vocabulary at that location, no exception is thrown when exporting.

{{{
// create vocabulary
String myVocabularyId = "mycategories";
Vocabulary vocabulary = new Vocabulary(myVocabularyId, VocabularyType.CATEGORY);
vocabulary.addItem("love");
vocabulary.addItem("hate");

// add it to a new doc  
EmotionMLDocument doc = new EmotionMLDocument();
doc.add(vocabulary);    

// and write the doc    
File file = File.createTempFile("myvocabularies", ".tmp");
exporter.export(doc, file);

// we could now safely refer to the love Category
Emotion emotion = new Emotion(new Category("love"));
emotion.setCategorySetURI(file.toURI() + "#" + myVocabularyId);

new EmotionMLExporter().export(emotion, System.out); // no exception but it would be better to save the doc somewhere else
}}}


== Example 8 - We can also embed the emotion and vocabulary in a document ==

Another possibility is to export not an emotion but a whole emotion document that contains both a vocabulary and an emotion that refers to this vocabulary locally. The only difference is that we add both the vocabulary and the emotion to the same vocabulary. To refer to the vocabulary inside the same document, the category-set URI only needs the fragment identifier (#`fragment`). When exporting the whole document, no exception is thrown. But note that if we would export the sole emotion, an exception would be thrown.

{{{
// create vocabulary
String myVocabularyId = "mycategories"; 
Vocabulary vocabulary = new Vocabulary(myVocabularyId, VocabularyType.CATEGORY);
vocabulary.addItem("love");
vocabulary.addItem("hate");

// add it to a new doc 
EmotionMLDocument doc = new EmotionMLDocument();
doc.add(vocabulary);

Emotion emotion = new Emotion(new Category("love"));
emotion.setCategorySetURI("#" + myVocabularyId); // the URI is local to the document 
doc.add(emotion);

new EmotionMLExporter().export(doc, System.out); // no exception since the vocabulary is contained in the same document
}}}


== Example 9 - An example of emotion ==

So far so good, we can now look at a more complex emotion. This one has one dimension called "valence" with a trace information and a high confidence. It is expressed through the face modality, more precisely the eyebrows and is attached to a text. The emotion is expressed in a mpeg video. It has independent relative timestamp:

{{{
Dimension dimension = new Dimension(FsreDimensions.VALENCE, new Trace(100, new float[] { 0.1f, 0.2f, 0.3f }));
dimension.setConfidence(0.8f);

Emotion emotion = new Emotion();
emotion.add(dimension); 
emotion.add(new ExpressedThrough(ExpressedThrough.Type.FACE));
emotion.add(new ExpressedThrough("eyebrows"));
emotion.setText(new EmotionText("this is sad but gets better")); 
emotion.add(new Reference(new URI("myvideo.mpeg"), "video/mpeg", Role.EXPRESSED_BY));

Timestamp timestamp = new Timestamp();
timestamp.setOffsetToStart(300);
timestamp.setTimeRefURI(new URI("#mysessionId"));
timestamp.setTimeRefAnchorPoint(TimeRefAnchorPoint.START);

emotion.setTimestamp(timestamp);
new EmotionMLExporter().export(emotion, System.out);
}}}


== Example 10 - Export to JSON ==

While not part of the EmotionML specification, the library also provides import/export from JSON. The library uses StAXON and its mapping convention (see [https://github.com/beckchr/staxon/wiki/Mapping-Convention Mapping convention in StAXON) to export JSON from XML and import XML from JSON. Instead of using EmotionMLExporter, one has to use JsonEmotionMLExporter as the following example shows:

{{{
Emotion emotion = new Emotion(new Dimension(FsreDimensions.VALENCE, 0.2f));

String json = new JsonEmotionMLExporter().export(emotion);

emotion = new JsonEmotionMLImporter().importEmotion(json);
}}} 


== Example 11 - But no textual content ==

Note that exporting to JSON has one restriction. It cannot export emotions that contains textual information.

{{{
Emotion emotion = new Emotion(Big6.SADNESS);
emotion.setText(new EmotionText("Alas, I will throw an exception when exporting in JSON..."));
new JsonEmotionMLExporter().export(emotion, System.out); // exception thrown because of mixed content
}}}